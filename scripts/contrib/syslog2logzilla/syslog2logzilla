#!/usr/bin/perl
$| = 1;
use strict;
use warnings;
use Log::Fast;
use FindBin;
use Getopt::Long;
use File::Basename;
use Cwd qw(abs_path);
my $ROOT_DIR = abs_path("$FindBin::Bin");
use POSIX qw/strftime/;

#FIXME - I had to add below for Perl 5.10 users.
# on Perl 5.10, I would get the following when running:
# perl -e"autoflush STDOUT, 1;"
# Can't locate object method "autoflush" via package "IO::Handle" at -e line 1.
use FileHandle;

# Create default logger, will reconfigure it as soon as we read configuration from database
my $log = Log::Fast->global();

my $myname = $0;
$myname =~ s{.*/}{};    # leave just program name without path

# Command line options
my $options = {
    debug   => 0,
    verbose => 0,
    logfile => "./$myname.log",
    help    => 0,

};

sub usage_and_exit {
    my ($exit_code) = @_;
    print STDERR qq{
    This program is used to convert old syslog files for sending to LogZilla - you MUST have LogZilla installed to use it!
    Note that some assumptions must be made when piping in old logs:
    1. There's no indicator of the Facility or Severity (normally) so all logs will be inserted as Local7/Debug
    2. The expected incoming message format is:
        Apr 01 18:01:26 HOSTNAME PROGRAM[PID]: Message Text
    If your logs aren't in this format, you will need to edit the patterns in this file to suit your needs.
    Note2: I have added some extra code for extracting the severity of the incoming message if it is a Cisco message (they contain the sev)
    Usage: $myname [-o --option] 
    -h        : this (help) message
    -d        : debug level (0-5) (0 = disabled [default])
    -v        : Also print results to STDERR
    -l        : log file (defaults to local dir
    Example: cat logfile | $myname -l /var/log/foo.log -d 1 -v
        or, to feed into LogZilla:
    cat logfile | $myname | /var/www/logzilla/scripts/logzilla
    };
    exit($exit_code);
}

GetOptions(
    'debug|d=i'    => \$options->{debug},
    'help|h!'      => \$options->{help},
    'verbose|v!'   => \$options->{verbose},
    'log-file|l=s' => \$options->{logfile},
    'cisco_only!' => \$options->{cisco_only},
) or usage_and_exit(1);    # got some invalid options

if ( $options->{help} ) {
    usage_and_exit(0);
}

# Reconfigure log to use logfile (as we finally got it from $settings), also
# set proper level and output based on $options{verbose} and $options{debug}
setup_log();

# Finally we are initialized, announce this to the world :-)
$log->INFO("Program initialized successfully");

my $date = strftime "%Y-%m-%d %H:%M:%S", localtime;

# Main
my @months   = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
my @days     = qw(Sun Mon Tue Wed Thu Fri Sat);
my %months_h = map { $_ => 1 } @months;
my $datetime = strftime( "%Y-%m-%d %H:%M:%S", localtime );
my ( $hms, $msg, $day, $ymd, $prg, $month_num );
my $sev = 7;    # Default set to debug if no sev is found

while ( my $line = <STDIN> ) {
    chomp $line;
    # Skip useless "MARK" messages
    next if ( $line =~ /-- MARK --/ );
    my ( $month, $day, $hms, $host, $prg, $msg ) = split( '\s+', $line, 6 );
    DEBUG( 1, "Original Line = $line" );
    if ( exists( $months_h{$month} ) ) {
        DEBUG( 1, "Incorrect Y-m-d value, converting..." );
        my ( $month, $day ) = split( '\s+', $line, 3 );
        my $yr = strftime( "%Y", localtime );
        $month_num = sprintf( "%02d", $months_h{$month} );
        $ymd = "$yr-$month_num-$day";
        DEBUG( 1, "Setting YMD to %s", $ymd );
    }
    if ( $msg =~ /\%([^:]*)\-(\d+)\-([A-Z\-\_\d]+?)(?:\:|\s)/ ) {
        $prg = "1019293"; # the logzilla processor will pick this up
        $sev = $2
    } else {
    	if ( $options->{cisco_only} ) {
	$log->INFO("Skipping non-cisco based message");
	next;
	}
    }
    # Cisco ASA's send their Mnemonic in the program field...
    if ( $prg =~ /\%([^:]*)\-(\d+)\-([A-Z\-\_\d]+?)(?:\:|\s)/ ) {
        $sev = $2
    }
    DEBUG( 1, "Setting Severity to $sev" );
    if ( !$prg ) {
        DEBUG( 1, "No program name found, setting to \"Syslog\"");
        $prg = "Syslog";
    }
    DEBUG( 1, "Month = %s, Day = %s, HMS = %s, Host = %s, Program = %s, Message = %s", $month_num, $day, $hms, $host, $prg, $msg );

    my $fac = 23;    # Manually set Local7 since we don't know the IETF facility
    my $pri = ( 23 * 8 + $sev );
    print "$ymd $hms\t$host\t$pri\t$prg\t$msg\n";
}

# There should only be subs from here down

# =================================================================================================
# Helper functions
# =================================================================================================

sub setup_log {
      my $log_dir = dirname( $options->{logfile} );

     # Create log dir, and build log path if not provided by command line option
      if ( !-d $log_dir ) {
          mkdir( $log_dir, 0755 ) or die("mkdir $log_dir: $!");
      }
      if ( !$options->{logfile} ) {
          $options->{logfile} = $log_dir . "/" . basename( $0, '.pl' ) . '.log';
      }

      my $log_options = {};

      # Set up output to file or both file and stderr
      if ( $options->{verbose} ) {

          # make multiplexer FH sending data both to file and STDERR
          open( my $fh, '>>:tee', $options->{logfile}, \*STDERR )
            or die("$options->{logfile}: $!");
          $fh->autoflush(1);
          $log_options->{fh} = $fh;
      }
      else {
          open( my $fh, '>>', $options->{logfile} ) or die("$options->{logfile}: $!");
          $log_options->{fh} = $fh;
      }

    # Setup extra information to put in every log line, depending on debug level
      if ( $options->{debug} > 1 ) {
          $log_options->{prefix} = "%D %T %S [%L] ";
      }
      else {
          $log_options->{prefix} = "%D %T [%L] ";
      }

      $log_options->{level} = $options->{debug} > 0 ? 'DEBUG' : 'INFO';

      $log->config($log_options);

      $SIG{__WARN__} = sub {
          my $msg = shift;
          $msg =~ s/\n//;
          $log->WARN($msg);
      };

      $log->INFO("Starting logging to $options->{logfile} with pid $$");
}

sub DEBUG {
      my ( $level, @log_args ) = @_;
      if ( $options->{debug} >= $level ) {
          $log->DEBUG(@log_args);
      }
}
