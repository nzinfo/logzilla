#!/usr/bin/perl
$| = 1;
use strict;
use warnings;
use Find::Lib qw(../../../lib);
use Log::Fast;
use FindBin;
use Getopt::Long;
use File::Basename;
use Cwd qw(abs_path);
my $ROOT_DIR = abs_path("$FindBin::Bin");
use POSIX qw/strftime/;
use LogZilla::Config;
use DBI;

#FIXME - I had to add below for Perl 5.10 users.
# on Perl 5.10, I would get the following when running:
# perl -e"autoflush STDOUT, 1;"
# Can't locate object method "autoflush" via package "IO::Handle" at -e line 1.
use FileHandle;

# Create default logger, will reconfigure it as soon as we read configuration from database
my $log = Log::Fast->global();

my $myname = $0;
$myname =~ s{.*/}{};    # leave just program name without path

# Command line options
my $options = {
    debug       => 0,
    verbose     => 0,
    logfile     => "./$myname.log",
    help        => 0,
    config_file => "$ROOT_DIR/../../../html/config/config.php",

};

sub usage_and_exit {
    my ($exit_code) = @_;
    print STDERR qq{
    This program is used to convert old syslog files for sending to LogZilla - you MUST have LogZilla installed to use it!
    Note that some assumptions must be made when piping in old logs:
    1. There's no indicator of the Facility or Severity (normally) so all logs will be inserted as Local7/Debug
    2. The expected incoming message format is:
        Apr 01 18:01:26 HOSTNAME PROGRAM[PID]: Message Text
    If your logs aren't in this format, you will need to edit the patterns in this file to suit your needs.
    Note2: I have added some extra code for extracting the severity of the incoming message if it is a Cisco message (they contain the sev)

    Usage: $myname [-o --option] 
    -h        : this (help) message
    -d        : debug level (0-5) (0 = disabled [default])
    -v        : Also print results to STDERR
    -c        : config file (defaults to $options->{config_file})
    -l        : log file (defaults to local dir
    -mv	      : Create associated view tables in the DB - needed when importing data older than today.
    -csco     : Only import cisco-type events (matching Cisco mnemonics)
    -ct       : Use current timestamp for all incoming logs instead of their original timestamps
    -kiwi     : Process logs saved from a Kiwi syslog host

Example Usage:
cat logfile | $myname -l /var/log/foo.log -d 1 -v
 or, to feed into LogZilla:
cat logfile | $myname | /var/www/logzilla/scripts/logzilla
    };
    print "\n";
    exit($exit_code);
}

GetOptions(
    'debug|d=i'       => \$options->{debug},
    'help|h!'         => \$options->{help},
    'verbose|v!'      => \$options->{verbose},
    'config-file|c=s' => \$options->{config_file},
    'log-file|l=s'    => \$options->{logfile},
    'cisco_only|csco!'=> \$options->{cisco_only},
    'makeview|mv!'    => \$options->{makeview},
    'sis!'            => \$options->{sis},
    'curtime|ct!'     => \$options->{ct},
    'kiwi!'           => \$options->{kiwi},
) or usage_and_exit(1);    # got some invalid options

if ( $options->{help} ) {
    usage_and_exit(0);
}

# Reconfigure log to use logfile (as we finally got it from $settings), also
# set proper level and output based on $options{verbose} and $options{debug}
setup_log();

# Finally we are initialized, announce this to the world :-)
$log->INFO("Program initialized successfully");

my $date = strftime "%Y-%m-%d %H:%M:%S", localtime;

# Main
my @months   = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
my @days     = qw(Sun Mon Tue Wed Thu Fri Sat);
my %facs     = ("kernel", "0", "user", "1", "mail", "2", "system", "daemon", "security/auth(4)", "4", "syslog-ng", "internal", "printer", "subsystem", "network", "news", "UUCP", "subsystem", "clock", "daemon(9)", "security/auth(10)", "10", "FTP", "daemon", "NTP", "subsystem", "log", "audit", "log", "alert", "clock", "daemon(15)", "local0", "16", "local1", "17", "local2", "18", "local3", "19", "local4", "20", "local5", "21", "local6", "22", "local7", "23");
my %months_h = map { $_ => 1 } @months;
my $datetime = strftime( "%Y-%m-%d %H:%M:%S", localtime );
my ( $hms, $msg, $day, $ymd, $prg, $month_num, $facsev, $fac, $sev, $ymdhms, $host);
my ( $results, $sth, $sql, $dbh );
my @ymds;
my $cfg = LogZilla::Config->new( path => $options->{config_file} );
$dbh = connect_to_db();

sub connect_to_db {
    $dbh = DBI->connect( $cfg->db_dsn, $cfg->db_user, $cfg->db_pass,
        { HandleError => sub { $log->ERR( $_[0] ); exit(1) } } );
    $dbh->{TraceLevel} = $options->{dbi_debug};
    return $dbh;
}

# Create hash with pairs of name => value for every row read from settings table
my $settings = read_settings_from_db();

sub read_settings_from_db {
    my %settings;
    my $sth = $dbh->prepare("SELECT name, value FROM settings");
    $sth->execute();
    while ( my $r = $sth->fetchrow_arrayref ) {
        $settings{ $r->[0] } = $r->[1];
    }
    $settings{SNARE} = 0 if $settings{SNARE} != 1;
    return \%settings;
}

while ( my $line = <STDIN> ) {
    chomp $line;
    # Skip useless "MARK" messages
    next if ( $line =~ /-- MARK --/ );
    DEBUG( 1, "Original Line = $line" );
    my ( $ymd, $month, $day, $hms, $host, $prg, $msg );
    if ( $options->{kiwi} ) {
        # 2013-11-17 00:00:00	Local4.Notice	10.4.1.254	:Nov 17 00:00:00 EST: %ASA-vpn-5-713257: Phase 1 failure:  Mismatched attribute types for class Group Description:  Rcv'd: Group 2  Cfg'd: Group 5
        ( $ymdhms, $facsev, $host, $msg ) = split(/\t/, $line);
        ($fac, $sev) = split (/\./, $facsev);
        $fac = lc($fac);
        $msg = $1 if ($msg =~ /:\S{3}\s+\d{2}\s+\d{2}:\d{2}:\d{2}\s+\S+\s+(.*)/); 
        DEBUG( 1, "YMD HMS = $ymdhms" );
        DEBUG( 1, "FAC = $fac" );
        $fac = $facs{"$fac"};
        DEBUG( 1, "FACNUM = $fac" );
        DEBUG( 1, "SEV = $sev" );
        DEBUG( 1, "HOST = $host" );
        DEBUG( 1, "MSG = $msg" );
        $line = $msg;
    }
    if ( $options->{sis} ) {
        $host = 'SomeHost';
        $prg = 'MyProgram';
        if ($line =~ /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun)\s+(.*)/) {
            ( $month, $day, $hms, $msg ) = split( '\s+', $2, 4 );
            $line = "$month $day $hms $host $prg $msg";
            $log->WARN("Setting line to $line");
        } else {
            ( $ymd, $hms, $msg ) = split( '\s+', $line );
            $line = "$ymd $hms $host $prg $msg";
            $log->INFO("Setting line to $line");
        }
    }
    if ($line =~ /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)/) {
        ( $month, $day, $hms, $host, $prg, $msg ) = split( '\s+', $line, 6 );
        DEBUG( 1, "Incorrect Y-m-d value, converting..." );
        my ( $month, $day ) = split( '\s+', $line, 3 );
        $day = sprintf( "%02d", $day);
        DEBUG( 1, "Month found is $month" );
        my $yr = strftime( "%Y", localtime );
        $month_num = sprintf( "%02d", ( aIndex( $month, @months ) ) + 1 );
        DEBUG( 1, "Month array position is $month_num" );
        $ymd = "$yr-$month_num-$day";
        DEBUG( 1, "Setting YMD to %s", $ymd );
    }
    if ( $msg =~ /\%([^:]*)\-(\d+)\-([A-Z\-\_\d]+?)(?:\:|\s)/ ) {
        $prg = "1019293";    # the logzilla processor will pick this up
        $sev = $2;
    } else {
        if ( $options->{cisco_only} ) {
            $log->INFO("Skipping non-cisco based message");
            next;
        }
    }

    # Cisco ASA's send their Mnemonic in the program field...
    if ( $prg =~ /\%([^:]*)\-(\d+)\-([A-Z\-\_\d]+?)(?:\:|\s)/ ) {
        $sev = $2
    }
    if ( !$prg ) {
        DEBUG( 1, "No program name found, setting to \"Syslog\"" );
        $prg = "Syslog";
    }

    $sev = 7 if ($sev !~ /\d/);    # Default set to debug if no sev is found
    $fac = 23 if ($fac !~ /\d+/);    # Manually set Local7 if blank
    DEBUG( 1, "Severity set to $sev" );
    DEBUG( 1, "Facility set to $fac" );
    my $pri = ( $fac * 8 + $sev );
    $ymdhms = "$ymd $hms" if (!$ymdhms);
    $ymdhms = strftime "%Y-%m-%d %H:%M:%S", localtime if ($options->{ct});
    ( $ymd, $hms ) = split( '\s+', $ymdhms );
    DEBUG( 1, "YMDHMS = %s, Host = %s, Program = %s, Message = %s", $ymdhms, $host, $prg, $msg );
    print "$ymdhms\t$host\t$pri\t$prg\t$msg\n";
    push( @ymds, $ymd ) if ( $options->{makeview} );
}
makeview() if ( $options->{makeview} );

# There should only be subs from here down

# =================================================================================================
# Helper functions
# =================================================================================================

sub uniq {
    my %temp_hash = map { $_, 0 } @_;
    return keys %temp_hash;
}

sub makeview {
    @ymds = uniq(@ymds);
    for my $ymd (@ymds) {
        $log->INFO("Creating view for $ymd");
        my ( $y, $m, $d );
        if ($ymd) {
            if ( $ymd =~ /(\d{4})-?(\d{2})-?(\d{2})-?/ ) {
                $y = $1;
                $m = $2;
                $d = $3;
                $log->INFO("Creating view name log_arch_day_$y$m$d");
                $sql = "CREATE OR REPLACE VIEW log_arch_day_$y$m$d AS SELECT `logs`.`id` AS `id`,`logs`.`host` AS `host`,`logs`.`facility` AS `facility`,`logs`.`severity` AS `severity`,`logs`.`program` AS `program`,`logs`.`msg` AS `msg`,`logs`.`mne` AS `mne`,`logs`.`eid` AS `eid`,`logs`.`suppress` AS `suppress`,`logs`.`counter` AS `counter`,`logs`.`fo` AS `fo`,`logs`.`lo` AS `lo`,`logs`.`notes` AS `notes` FROM `logs` where ((`logs`.`fo` >= '$ymd 00:00:00') AND (`logs`.`fo` <= '$ymd 23:59:59'))";
                DEBUG( 1, "Executing SQL Statement: $sql" );
                $dbh->do($sql) unless $options->{dryrun};
                $sql = "SELECT table_name FROM INFORMATION_SCHEMA.tables where table_type = 'VIEW' AND table_schema = 'syslog' AND table_name LIKE 'log_arch_day_$y$m$d%'";
                $sth = $dbh->prepare($sql);
                DEBUG( 1, "Executing SQL Statement: $sql" );
                $sth->execute();

                while ( $results = $sth->fetchrow_hashref ) {
                    $log->INFO("Creating view_limits for log_arch_day_$y$m$d");
                    $sql = "INSERT IGNORE INTO view_limits (view_name, min_id, max_id) values ('$results->{table_name}', (SELECT min(id) FROM $results->{table_name}), (SELECT max(id) FROM $results->{table_name}))";
                    DEBUG( 1, "Executing SQL Statement: $sql" );
                    $dbh->do($sql) unless $options->{dryrun};
                    $log->INFO("View creation complete");
                    my $cores = $settings->{SPX_CPU_CORES};
                    for ( my $i = 0 ; $i < $cores ; $i++ ) {
                        system("cd $ROOT_DIR/../../../sphinx && bin/indexer  idx_log_arch_day_$y$m${d}_$i --rotate");
                    }
                }
            } else {
                $log->ERR("Date string must be in the form YYYY-MM-DD");
            }
        } else {
            $log->ERR("Option 'makeview' requires a date in the form YYYY-MM-DD");
        }
    }
}

sub setup_log {
    my $log_dir = dirname( $options->{logfile} );

    # Create log dir, and build log path if not provided by command line option
    if ( !-d $log_dir ) {
        mkdir( $log_dir, 0755 ) or die("mkdir $log_dir: $!");
    }
    if ( !$options->{logfile} ) {
        $options->{logfile} = $log_dir . "/" . basename( $0, '.pl' ) . '.log';
    }

    my $log_options = {};

    # Set up output to file or both file and stderr
    if ( $options->{verbose} ) {

        # make multiplexer FH sending data both to file and STDERR
        open( my $fh, '>>:tee', $options->{logfile}, \*STDERR )
            or die("$options->{logfile}: $!");
        $fh->autoflush(1);
        $log_options->{fh} = $fh;
    }
    else {
        open( my $fh, '>>', $options->{logfile} ) or die("$options->{logfile}: $!");
        $log_options->{fh} = $fh;
    }

    # Setup extra information to put in every log line, depending on debug level
    if ( $options->{debug} > 1 ) {
        $log_options->{prefix} = "%D %T %S [%L] ";
    }
    else {
        $log_options->{prefix} = "%D %T [%L] ";
    }

    $log_options->{level} = $options->{debug} > 0 ? 'DEBUG' : 'INFO';

    $log->config($log_options);

    $SIG{__WARN__} = sub {
        my $msg = shift;
        $msg =~ s/\n//;
        $log->WARN($msg);
    };

    $log->INFO("Starting logging to $options->{logfile} with pid $$");
}

sub DEBUG {
    my ( $level, @log_args ) = @_;
    if ( $options->{debug} >= $level ) {
        $log->DEBUG(@log_args);
    }
}
sub aIndex { for ( 1 .. @_ ) { $_[0] eq $_[$_] && return $_ - 1 } -1 }
