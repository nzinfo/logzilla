.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Syslog::Fast 3"
.TH Log::Syslog::Fast 3 "2012-10-31" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Syslog::Fast \- Perl extension for sending syslog messages over TCP, UDP,
or UNIX sockets with minimal CPU overhead.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Log::Syslog::Fast \*(Aq:all\*(Aq;
\&  my $logger = Log::Syslog::Fast\->new(LOG_UDP, "127.0.0.1", 514, LOG_LOCAL0, LOG_INFO, "mymachine", "logger");
\&  $logger\->send("log message", time);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module sends syslog messages over a network socket. It works like
Sys::Syslog in setlogsock's 'udp', 'tcp', or 'unix' modes, but without the
significant \s-1CPU\s0 overhead of that module when used for high-volume logging. Use
of this specialized module is only recommended if 1) you must use network
syslog as a messaging transport but 2) need to minimize the time spent in the
logger.
.PP
This module supercedes the less general Log::Syslog::UDP.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Log::Syslog::Fast\->new($proto, $hostname, $port, $facility, $severity, $sender, $name);" 4
.el .IP "Log::Syslog::Fast\->new($proto, \f(CW$hostname\fR, \f(CW$port\fR, \f(CW$facility\fR, \f(CW$severity\fR, \f(CW$sender\fR, \f(CW$name\fR);" 4
.IX Item "Log::Syslog::Fast->new($proto, $hostname, $port, $facility, $severity, $sender, $name);"
Create a new Log::Syslog::Fast object with the following parameters:
.RS 4
.ie n .IP "$proto" 4
.el .IP "\f(CW$proto\fR" 4
.IX Item "$proto"
The transport protocol: one of \s-1LOG_TCP\s0, \s-1LOG_UDP\s0, or \s-1LOG_UNIX\s0.
.Sp
If \s-1LOG_TCP\s0 or \s-1LOG_UNIX\s0 is used, calls to \f(CW$logger\fR\->\fIsend()\fR will block until
remote receipt of the message is confirmed. If \s-1LOG_UDP\s0 is used, the call will
never block and may fail if insufficient buffer space exists in the network
stack (in which case an exception will be thrown).
.Sp
With \s-1LOG_UNIX\s0, \fI\->new\fR will first attempt to connect with a \s-1SOCK_STREAM\s0
socket, and then try a \s-1SOCK_DGRAM\s0 if that is what the server expects (e.g.
rsyslog).
.ie n .IP "$hostname" 4
.el .IP "\f(CW$hostname\fR" 4
.IX Item "$hostname"
For \s-1LOG_TCP\s0 and \s-1LOG_UDP\s0, the destination hostname where a syslogd is running.
For \s-1LOG_UNIX\s0, the path to the \s-1UNIX\s0 socket where syslogd is listening (typically
/dev/log).
.ie n .IP "$port" 4
.el .IP "\f(CW$port\fR" 4
.IX Item "$port"
For \s-1LOG_TCP\s0 and \s-1LOG_UDP\s0, the destination port where a syslogd is listening,
usually 514. Unused for \s-1LOG_UNIX\s0, but should not be undefined or a warning will
be emitted under strict.
.ie n .IP "$facility" 4
.el .IP "\f(CW$facility\fR" 4
.IX Item "$facility"
The syslog facility constant, eg 16 for 'local0'. See \s-1RFC3164\s0 section 4.1.1 (or
<sys/syslog.h>) for appropriate constant values. See \s-1EXPORTS\s0 below
for making these available by name.
.Sp
The \fIpriority\fR value is computed from the facility and severity per the \s-1RFC\s0.
.ie n .IP "$severity" 4
.el .IP "\f(CW$severity\fR" 4
.IX Item "$severity"
The syslog severity constant, eg 6 for 'info'. See \s-1RFC3164\s0 section 4.1.1 (or
<sys/syslog.h>) for appropriate constant values. See \s-1EXPORTS\s0 below
for making these available by name.
.ie n .IP "$sender" 4
.el .IP "\f(CW$sender\fR" 4
.IX Item "$sender"
The originating hostname. Sys::Hostname::hostname is typically a reasonable
source for this.
.ie n .IP "$name" 4
.el .IP "\f(CW$name\fR" 4
.IX Item "$name"
The program name or tag to use for the message.
.RE
.RS 4
.RE
.ie n .IP "$logger\->send($logmsg, [$time])" 4
.el .IP "\f(CW$logger\fR\->send($logmsg, [$time])" 4
.IX Item "$logger->send($logmsg, [$time])"
.PD 0
.ie n .IP "$logger\->emit($logmsg, [$time])" 4
.el .IP "\f(CW$logger\fR\->emit($logmsg, [$time])" 4
.IX Item "$logger->emit($logmsg, [$time])"
.PD
Send a syslog message through the configured logger. If \f(CW$time\fR is not provided,
\&\fB\f(BItime\fB\|(2)\fR will be called for you. That doubles the syscalls per message, so
try to pass it if you're already calling \fItime()\fR yourself.
.Sp
\&\->send may throw an exception if the system call fails (e.g. the transport
becomes disconnected for connected protocols, or the kernel buffer is full for
unconnected). For this reason it is usually wise to wrap calls with an
exception handler. Likewise, calling \->send from a \f(CW$SIG\fR{_\|_DIE_\|_} handler is
unwise.
.Sp
\&\fBemit\fR is an alias for \fBsend\fR.
.Sp
\&\fB\s-1NEWLINE\s0 \s-1CAVEAT\s0\fR
.Sp
Note that \fBsend\fR does not add any newline character(s) to its input. You will
certainly want to do this yourself for \s-1TCP\s0 connections, or the server will not
treat each message as a separate line. However with \s-1UDP\s0 the server should
accept a message without a trailing newline (though some implementations may
have difficulty with that).
.ie n .IP "$logger\->set_receiver($proto, $hostname, $port)" 4
.el .IP "\f(CW$logger\fR\->set_receiver($proto, \f(CW$hostname\fR, \f(CW$port\fR)" 4
.IX Item "$logger->set_receiver($proto, $hostname, $port)"
Change the protocol, destination host, and port. This will force a reconnection
in \s-1LOG_TCP\s0 or \s-1LOG_UNIX\s0 mode.
.ie n .IP "$logger\->set_priority($facility, $severity)" 4
.el .IP "\f(CW$logger\fR\->set_priority($facility, \f(CW$severity\fR)" 4
.IX Item "$logger->set_priority($facility, $severity)"
Change both the syslog facility and severity.
.ie n .IP "$logger\->set_facility($facility)" 4
.el .IP "\f(CW$logger\fR\->set_facility($facility)" 4
.IX Item "$logger->set_facility($facility)"
Change only the syslog facility.
.ie n .IP "$logger\->set_severity($severity)" 4
.el .IP "\f(CW$logger\fR\->set_severity($severity)" 4
.IX Item "$logger->set_severity($severity)"
Change only the syslog severity.
.ie n .IP "$logger\->set_sender($sender)" 4
.el .IP "\f(CW$logger\fR\->set_sender($sender)" 4
.IX Item "$logger->set_sender($sender)"
Change what is sent as the hostname of the sender.
.ie n .IP "$logger\->set_name($name)" 4
.el .IP "\f(CW$logger\fR\->set_name($name)" 4
.IX Item "$logger->set_name($name)"
Change what is sent as the name of the sending program.
.ie n .IP "$logger\->set_pid($name)" 4
.el .IP "\f(CW$logger\fR\->set_pid($name)" 4
.IX Item "$logger->set_pid($name)"
Change what is sent as the process id of the sending program.
.ie n .IP "$logger\->set_format($format)" 4
.el .IP "\f(CW$logger\fR\->set_format($format)" 4
.IX Item "$logger->set_format($format)"
Change the message format. This should be either the constant \s-1LOG_RFC3164\s0 (the
default) or \s-1LOG_RFC5424\s0.
.ie n .IP "$logger\->\fIget_priority()\fR" 4
.el .IP "\f(CW$logger\fR\->\fIget_priority()\fR" 4
.IX Item "$logger->get_priority()"
Returns the current priority value.
.ie n .IP "$logger\->\fIget_facility()\fR" 4
.el .IP "\f(CW$logger\fR\->\fIget_facility()\fR" 4
.IX Item "$logger->get_facility()"
Returns the current facility value.
.ie n .IP "$logger\->\fIget_severity()\fR" 4
.el .IP "\f(CW$logger\fR\->\fIget_severity()\fR" 4
.IX Item "$logger->get_severity()"
Returns the current severity value.
.ie n .IP "$logger\->get_format($format)" 4
.el .IP "\f(CW$logger\fR\->get_format($format)" 4
.IX Item "$logger->get_format($format)"
Returns the current message format.
.SH "UNREACHABLE SERVERS"
.IX Header "UNREACHABLE SERVERS"
If the remote syslogd is unreachable, certain methods may throw an exception or
raise a signal:
.IP "\(bu" 4
\&\s-1LOG_TCP\s0
.Sp
If the server is unreachable at connect time, \fI\->new\fR will fail with an
exception. If an established connection is closed remotely, \fI\->send\fR will
fail with an exception.
.IP "\(bu" 4
\&\s-1LOG_UDP\s0
.Sp
As \s-1UDP\s0 is connectionless, \fI\->new\fR will not throw an error as no attempt to
connect is made then. However, if the remote server starts or becomes unreachable and
1) the host is alive but 2) not listening on the specified port, and
3) \s-1ICMP\s0 packets are routable to the client, an exception \fBmay\fR be thrown by \fI\->send\fR; note that this may happen only on the second call, and subsequently
every other one. This behavior also depends on specific kernel interactions.
.IP "\(bu" 4
\&\s-1LOG_UNIX\s0
.Sp
With both \s-1SOCK_STREAM\-\s0 and SOCK_DGRAM\-based servers, \fI\->new\fR will throw an
exception if the socket is missing or not connectable.
.Sp
With \s-1SOCK_DGRAM\s0, \fI\->send\fR to a peer that went away will throw. With
\&\s-1SOCK_STREAM\s0, \fI\->send\fR to a peer that went away will raise \s-1SIGPIPE\s0.
.SH "EXPORTS"
.IX Header "EXPORTS"
Use Log::Syslog::Constants to export priority constants, e.g. \s-1LOG_INFO\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Syslog::Constants
.PP
Sys::Syslog
.SH "BUGS"
.IX Header "BUGS"
\&\s-1LOG_UNIX\s0 with \s-1SOCK_DGRAM\s0 has not been well tested.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Thomason, <athomason@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2011 by Say Media, Inc.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.5 or,
at your option, any later version of Perl 5 you may have available.
